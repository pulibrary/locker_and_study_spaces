# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/locker_violations' do
  let(:user) { FactoryBot.create(:user) }
  # LockerViolation. As you add validations to LockerViolation, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    { locker_id: locker.id, user_id: violation_user.id, number_of_books: 8 }
  end
  let(:invalid_attributes) do
    { locker_id: locker.id, user_id: 123_456, number_of_books: 8 }
  end
  let(:locker) { FactoryBot.create(:locker) }
  let(:violation_user) { FactoryBot.create(:user) }
  let(:locker_application) { FactoryBot.create(:locker_application, user: violation_user) }
  let(:locker_assignment) { FactoryBot.create(:locker_assignment, locker_application:, locker:) }

  before do
    sign_in user
    locker_assignment
  end

  describe 'GET /index' do
    it 'renders a redirect response' do
      LockerViolation.create! valid_attributes
      get locker_violations_url
      expect(response).to be_redirect
    end
  end

  describe 'GET /show' do
    it 'renders a redirect response' do
      violation = LockerViolation.create! valid_attributes
      get locker_violation_url(violation)
      expect(response).to be_redirect
    end
  end

  describe 'GET /new' do
    it 'renders a redirect response' do
      get new_locker_violation_url(locker_violation: { locker_id: locker.id })
      expect(response).to be_redirect
    end
  end

  describe 'GET /edit' do
    it 'renders a redirect response' do
      violation = LockerViolation.create! valid_attributes
      get edit_locker_violation_url(violation)
      expect(response).to be_redirect
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new LockerViolation' do
        expect do
          post locker_violations_url, params: { violation: valid_attributes }
        end.not_to change(LockerViolation, :count)
      end

      it 'redirects to the created violation' do
        post locker_violations_url, params: { violation: valid_attributes }
        expect(response).to redirect_to(root_path)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new LockerViolation' do
        expect do
          post locker_violations_url, params: { violation: invalid_attributes }
        end.not_to change(LockerViolation, :count)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post locker_violations_url, params: { violation: invalid_attributes }
        expect(response).to redirect_to(root_path)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        { locker_id: locker.id, user_id: violation_user.id, number_of_books: 21 }
      end

      it 'updates the requested violation' do
        violation = LockerViolation.create! valid_attributes
        patch locker_violation_url(violation), params: { violation: new_attributes }
        violation.reload
        expect(violation.number_of_books).to eq(8)
      end

      it 'redirects to the violation' do
        violation = LockerViolation.create! valid_attributes
        patch locker_violation_url(violation), params: { violation: new_attributes }
        violation.reload
        expect(response).to redirect_to(root_path)
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        violation = LockerViolation.create! valid_attributes
        patch locker_violation_url(violation), params: { violation: invalid_attributes }
        expect(response).to redirect_to(root_path)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested violation' do
      violation = LockerViolation.create! valid_attributes
      expect do
        delete locker_violation_url(violation)
      end.not_to change(LockerViolation, :count)
    end

    it 'redirects to the violations list' do
      violation = LockerViolation.create! valid_attributes
      delete locker_violation_url(violation)
      expect(response).to redirect_to(root_path)
    end
  end

  context 'an admin user' do
    let(:user) { FactoryBot.create(:user, :admin) }

    describe 'GET /index' do
      it 'renders a successful response' do
        LockerViolation.create! valid_attributes
        get locker_violations_url
        expect(response).to be_successful
      end
    end

    describe 'GET /show' do
      it 'renders a successful response' do
        violation = LockerViolation.create! valid_attributes
        get locker_violation_url(violation)
        expect(response).to be_successful
      end
    end

    describe 'GET /new' do
      it 'renders a successful response' do
        get new_locker_violation_url(locker_violation: { locker_id: locker.id })
        expect(response).to be_successful
      end
    end

    describe 'GET /edit' do
      it 'render a successful response' do
        violation = LockerViolation.create! valid_attributes
        get edit_locker_violation_url(violation)
        expect(response).to be_successful
      end
    end

    describe 'POST /create' do
      context 'with valid parameters' do
        it 'creates a new LockerViolation' do
          expect do
            post locker_violations_url, params: { locker_violation: valid_attributes }
          end.to change(LockerViolation, :count).by(1)
        end

        it 'redirects to the created violation' do
          post locker_violations_url, params: { locker_violation: valid_attributes }
          expect(response).to redirect_to(locker_violation_url(LockerViolation.last))
        end
      end

      context 'with invalid parameters' do
        it 'does not create a new LockerViolation' do
          expect do
            post locker_violations_url, params: { locker_violation: invalid_attributes }
          end.not_to change(LockerViolation, :count)
        end

        it "renders a successful response (i.e. to display the 'new' template)" do
          post locker_violations_url, params: { locker_violation: invalid_attributes }
          expect(response).to be_unprocessable
        end
      end
    end

    describe 'PATCH /update' do
      context 'with valid parameters' do
        let(:new_attributes) do
          { locker_id: locker.id, user_id: violation_user.id, number_of_books: 21 }
        end

        it 'updates the requested violation' do
          violation = LockerViolation.create! valid_attributes
          patch locker_violation_url(violation), params: { locker_violation: new_attributes }
          violation.reload
          expect(violation.number_of_books).to eq(21)
        end

        it 'redirects to the violation' do
          violation = LockerViolation.create! valid_attributes
          patch locker_violation_url(violation), params: { locker_violation: new_attributes }
          violation.reload
          expect(response).to redirect_to(locker_violation_url(violation))
        end
      end

      context 'with invalid parameters' do
        it "renders a successful response (i.e. to display the 'edit' template)" do
          violation = LockerViolation.create! valid_attributes
          patch locker_violation_url(violation), params: { locker_violation: invalid_attributes }
          expect(response).to be_unprocessable
        end
      end
    end

    describe 'DELETE /destroy' do
      it 'destroys the requested violation' do
        violation = LockerViolation.create! valid_attributes
        expect do
          delete locker_violation_url(violation)
        end.to change(LockerViolation, :count).by(-1)
      end

      it 'redirects to the violations list' do
        violation = LockerViolation.create! valid_attributes
        delete locker_violation_url(violation)
        expect(response).to redirect_to(locker_violations_url)
      end
    end
  end
end
