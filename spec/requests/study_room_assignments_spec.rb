# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/study_room_assignments' do
  let(:user) { FactoryBot.create(:user) }
  let(:study_room) { FactoryBot.create(:study_room) }
  # StudyRoomAssignment. As you add validations to StudyRoomAssignment, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      user_id: user.id,
      study_room_id: study_room.id,
      start_date: DateTime.current.to_date
    }
  end

  let(:invalid_attributes) do
    {
      user_id: nil,
      study_room_id: study_room.id,
      start_date: DateTime.current.to_date
    }
  end

  before do
    sign_in user
  end

  describe 'GET /index' do
    it 'redirects to the root path' do
      StudyRoomAssignment.create! valid_attributes
      get study_room_assignments_url
      expect(response).to redirect_to(root_path)
    end
  end

  describe 'GET /show' do
    it 'redirects to the root path' do
      study_room_assignment = StudyRoomAssignment.create! valid_attributes
      get study_room_assignment_url(study_room_assignment)
      expect(response).to redirect_to(root_path)
    end
  end

  describe 'GET /new' do
    it 'redirects to the root path' do
      get new_study_room_assignment_url
      expect(response).to redirect_to(root_path)
    end
  end

  describe 'GET /edit' do
    it 'redirects to the root path' do
      study_room_assignment = StudyRoomAssignment.create! valid_attributes
      get edit_study_room_assignment_url(study_room_assignment)
      expect(response).to redirect_to(root_path)
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'redirects to the root path' do
        expect do
          post study_room_assignments_url, params: { study_room_assignment: valid_attributes }
        end.not_to change(StudyRoomAssignment, :count)
      end

      it 'redirects to the created study_room_assignment' do
        post study_room_assignments_url, params: { study_room_assignment: valid_attributes }
        expect(response).to redirect_to(root_path)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new StudyRoomAssignment' do
        expect do
          post study_room_assignments_url, params: { study_room_assignment: invalid_attributes }
        end.not_to change(StudyRoomAssignment, :count)
        expect(response).to redirect_to(root_path)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post study_room_assignments_url, params: { study_room_assignment: invalid_attributes }
        expect(response).to redirect_to(root_path)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'redirects to the root path' do
        study_room_assignment = StudyRoomAssignment.create! valid_attributes
        patch study_room_assignment_url(study_room_assignment), params: { study_room_assignment: new_attributes }
        study_room_assignment.reload
        expect(response).to redirect_to(root_path)
      end

      it 'redirects to the root path' do
        study_room_assignment = StudyRoomAssignment.create! valid_attributes
        patch study_room_assignment_url(study_room_assignment), params: { study_room_assignment: new_attributes }
        study_room_assignment.reload
        expect(response).to redirect_to(root_path)
      end
    end

    context 'with invalid parameters' do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        study_room_assignment = StudyRoomAssignment.create! valid_attributes
        patch study_room_assignment_url(study_room_assignment), params: { study_room_assignment: invalid_attributes }
        expect(response).to redirect_to(root_path)
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'redirects to the root path' do
      study_room_assignment = StudyRoomAssignment.create! valid_attributes
      expect do
        delete study_room_assignment_url(study_room_assignment)
      end.not_to change(StudyRoomAssignment, :count)
    end

    it 'redirects to the root path' do
      study_room_assignment = StudyRoomAssignment.create! valid_attributes
      delete study_room_assignment_url(study_room_assignment)
      expect(response).to redirect_to(root_path)
    end
  end

  context 'As an admin user' do
    let(:user) { FactoryBot.create(:user, :admin) }

    describe 'GET /index' do
      it 'renders a successful response' do
        StudyRoomAssignment.create! valid_attributes
        get study_room_assignments_url
        expect(response).to be_successful
      end
    end

    describe 'GET /show' do
      it 'renders a successful response' do
        study_room_assignment = StudyRoomAssignment.create! valid_attributes
        get study_room_assignment_url(study_room_assignment)
        expect(response).to be_successful
      end
    end

    describe 'GET /new' do
      it 'renders a successful response' do
        get new_study_room_assignment_url
        expect(response).to be_successful
      end
    end

    describe 'GET /edit' do
      it 'render a successful response' do
        study_room_assignment = StudyRoomAssignment.create! valid_attributes
        get edit_study_room_assignment_url(study_room_assignment)
        expect(response).to be_successful
      end
    end

    describe 'POST /create' do
      context 'with valid parameters' do
        it 'creates a new StudyRoomAssignment' do
          expect do
            post study_room_assignments_url, params: { study_room_assignment: valid_attributes }
          end.to change(StudyRoomAssignment, :count).by(1)
        end

        it 'redirects to the created study_room_assignment' do
          post study_room_assignments_url, params: { study_room_assignment: valid_attributes }
          expect(response).to redirect_to(study_room_assignment_url(StudyRoomAssignment.last))
        end
      end

      context 'with invalid parameters' do
        it 'does not create a new StudyRoomAssignment' do
          expect do
            post study_room_assignments_url, params: { study_room_assignment: invalid_attributes }
          end.not_to change(StudyRoomAssignment, :count)
        end

        it "renders a successful response (i.e. to display the 'new' template)" do
          post study_room_assignments_url, params: { study_room_assignment: invalid_attributes }
          expect(response).to be_unprocessable
        end
      end
    end

    describe 'PATCH /update' do
      context 'with valid parameters' do
        let(:new_attributes) do
          skip('Add a hash of attributes valid for your model')
        end

        it 'updates the requested study_room_assignment' do
          study_room_assignment = StudyRoomAssignment.create! valid_attributes
          patch study_room_assignment_url(study_room_assignment), params: { study_room_assignment: new_attributes }
          study_room_assignment.reload
          skip('Add assertions for updated state')
        end

        it 'redirects to the study_room_assignment' do
          study_room_assignment = StudyRoomAssignment.create! valid_attributes
          patch study_room_assignment_url(study_room_assignment), params: { study_room_assignment: new_attributes }
          study_room_assignment.reload
          expect(response).to redirect_to(study_room_assignment_url(study_room_assignment))
        end
      end

      context 'with invalid parameters' do
        it "renders a successful response (i.e. to display the 'edit' template)" do
          study_room_assignment = StudyRoomAssignment.create! valid_attributes
          patch study_room_assignment_url(study_room_assignment), params: { study_room_assignment: invalid_attributes }
          expect(response).to be_unprocessable
        end
      end
    end

    describe 'DELETE /destroy' do
      it 'destroys the requested study_room_assignment' do
        study_room_assignment = StudyRoomAssignment.create! valid_attributes
        expect do
          delete study_room_assignment_url(study_room_assignment)
        end.to change(StudyRoomAssignment, :count).by(-1)
      end

      it 'redirects to the study_room_assignments list' do
        study_room_assignment = StudyRoomAssignment.create! valid_attributes
        delete study_room_assignment_url(study_room_assignment)
        expect(response).to redirect_to(study_room_assignments_url)
      end
    end
  end
end
